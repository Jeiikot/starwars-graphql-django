# Generated by Django 4.2.23 on 2025-07-17 21:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Character",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("swapi_id", models.IntegerField(null=True)),
                ("name", models.CharField(max_length=100)),
                ("birth_year", models.CharField(blank=True, max_length=10)),
                ("species", models.CharField(blank=True, max_length=50)),
                ("height", models.CharField(blank=True, max_length=10)),
                ("mass", models.CharField(blank=True, max_length=10)),
                ("hair_color", models.CharField(blank=True, max_length=50)),
                ("skin_color", models.CharField(blank=True, max_length=50)),
                ("eye_color", models.CharField(blank=True, max_length=50)),
                ("gender", models.CharField(blank=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalCharacter",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("swapi_id", models.IntegerField(null=True)),
                ("name", models.CharField(max_length=100)),
                ("birth_year", models.CharField(blank=True, max_length=10)),
                ("species", models.CharField(blank=True, max_length=50)),
                ("height", models.CharField(blank=True, max_length=10)),
                ("mass", models.CharField(blank=True, max_length=10)),
                ("hair_color", models.CharField(blank=True, max_length=50)),
                ("skin_color", models.CharField(blank=True, max_length=50)),
                ("eye_color", models.CharField(blank=True, max_length=50)),
                ("gender", models.CharField(blank=True, max_length=30)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical character",
                "verbose_name_plural": "historical characters",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMovie",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("swapi_id", models.IntegerField(null=True)),
                ("title", models.CharField(max_length=100)),
                ("episode_id", models.IntegerField()),
                ("opening_crawl", models.TextField()),
                ("director", models.CharField(max_length=100)),
                ("producers", models.CharField(max_length=255)),
                ("release_date", models.DateField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical movie",
                "verbose_name_plural": "historical movies",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPlanet",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("swapi_id", models.IntegerField(null=True)),
                ("name", models.CharField(max_length=100)),
                ("climate", models.CharField(blank=True, max_length=100)),
                ("terrain", models.CharField(blank=True, max_length=100)),
                ("rotation_period", models.CharField(blank=True, max_length=10)),
                ("orbital_period", models.CharField(blank=True, max_length=10)),
                ("diameter", models.CharField(blank=True, max_length=10)),
                ("gravity", models.CharField(blank=True, max_length=50)),
                ("surface_water", models.CharField(blank=True, max_length=10)),
                ("population", models.CharField(blank=True, max_length=20)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical planet",
                "verbose_name_plural": "historical planets",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("swapi_id", models.IntegerField(null=True)),
                ("title", models.CharField(max_length=100)),
                ("episode_id", models.IntegerField()),
                ("opening_crawl", models.TextField()),
                ("director", models.CharField(max_length=100)),
                ("producers", models.CharField(max_length=255)),
                ("release_date", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="Planet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("swapi_id", models.IntegerField(null=True)),
                ("name", models.CharField(max_length=100)),
                ("climate", models.CharField(blank=True, max_length=100)),
                ("terrain", models.CharField(blank=True, max_length=100)),
                ("rotation_period", models.CharField(blank=True, max_length=10)),
                ("orbital_period", models.CharField(blank=True, max_length=10)),
                ("diameter", models.CharField(blank=True, max_length=10)),
                ("gravity", models.CharField(blank=True, max_length=50)),
                ("surface_water", models.CharField(blank=True, max_length=10)),
                ("population", models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.AddConstraint(
            model_name="planet",
            constraint=models.UniqueConstraint(
                condition=models.Q(("swapi_id", None), _negated=True),
                fields=("swapi_id",),
                name="unique_swapi_id_not_null_in_planet",
            ),
        ),
        migrations.AddField(
            model_name="movie",
            name="planets",
            field=models.ManyToManyField(related_name="movies", to="starwars.planet"),
        ),
        migrations.AddField(
            model_name="historicalplanet",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalmovie",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcharacter",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcharacter",
            name="homeworld",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="starwars.planet",
            ),
        ),
        migrations.AddField(
            model_name="character",
            name="homeworld",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="residents",
                to="starwars.planet",
            ),
        ),
        migrations.AddField(
            model_name="character",
            name="movies",
            field=models.ManyToManyField(
                related_name="characters", to="starwars.movie"
            ),
        ),
        migrations.AddConstraint(
            model_name="movie",
            constraint=models.UniqueConstraint(
                condition=models.Q(("swapi_id", None), _negated=True),
                fields=("swapi_id",),
                name="unique_swapi_id_not_null_in_movie",
            ),
        ),
        migrations.AddConstraint(
            model_name="character",
            constraint=models.UniqueConstraint(
                condition=models.Q(("swapi_id", None), _negated=True),
                fields=("swapi_id",),
                name="unique_swapi_id_not_null_in_character",
            ),
        ),
    ]
